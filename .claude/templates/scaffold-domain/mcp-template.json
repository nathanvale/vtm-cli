{
  "authentication": {
    "api_key": {
      "expires": "Key validity period",
      "header": "X-API-Key: {key}",
      "scope": "Key permissions",
      "where_to_get": "https://dashboard.{service}.com/api-keys"
    },

    "bearer_token": {
      "expires": "Token expiration policy",
      "header": "Authorization: Bearer {token}",
      "scope": "Required scopes: read, write",
      "where_to_get": "https://developers.{service}.com/tokens"
    },

    "description": "How to authenticate with the service",

    "method": "{AUTH_TYPE}",
    "oauth": {
      "auth_url": "https://{service}.com/oauth/authorize",
      "client_id": "${DOMAIN_SERVICE_CLIENT_ID}",
      "client_secret": "${DOMAIN_SERVICE_CLIENT_SECRET}",
      "scopes": ["read", "write", "delete"],
      "token_url": "https://{service}.com/oauth/token"
    }
  },

  "configuration": {
    "credentials": {
      "api_key": "${DOMAIN_SERVICE_API_KEY}",
      "custom_field": "${DOMAIN_SERVICE_CUSTOM_FIELD}",
      "database_id": "${DOMAIN_SERVICE_DB_ID}",
      "workspace_id": "${DOMAIN_SERVICE_WORKSPACE_ID}"
    },

    "endpoint": "https://{SERVICE_ENDPOINT}/v1",
    "notes": "CUSTOMIZE: Keep only the environment variables you need",
    "optional_env_vars": ["{DOMAIN_SERVICE_CUSTOM_FIELD}"],

    "required_env_vars": ["{DOMAIN_SERVICE_API_KEY}", "{DOMAIN_SERVICE_DB_ID}"],

    "retry_attempts": 3,
    "retry_delay_ms": 1000,

    "timeout_seconds": 30
  },

  "connection": {
    "auth_type": "{AUTH_TYPE}",
    "notes": "CUSTOMIZE: Update auth_type based on service",
    "protocol": "https",
    "service": "{system}",
    "type": "{connection_type}"
  },

  "customization": {
    "common_modifications": [
      {
        "description": "If {system} supports different protocols (REST, GraphQL, WebSocket)",
        "example": "Update 'connection.type' to 'graphql'",
        "name": "Change connection type"
      },
      {
        "description": "Define additional queries or mutations specific to your use case",
        "example": "Add webhook operations if {system} supports them",
        "name": "Add custom operations"
      },
      {
        "description": "Add custom fields or change field names to match your schema",
        "example": "Add 'priority', 'team_id', 'due_date' fields",
        "name": "Modify data models"
      },
      {
        "description": "Extend filter capabilities based on your data",
        "example": "Add 'team', 'project', 'priority' filters",
        "name": "Add filtering options"
      }
    ],
    "description": "How to adapt this MCP for your needs"
  },

  "data_models": {
    "Item": {
      "example": {
        "created_at": "2025-10-29T10:00:00Z",
        "description": "Configure the MCP server",
        "id": "item-123",
        "status": "in-progress",
        "title": "Complete setup",
        "updated_at": "2025-10-29T14:30:00Z"
      },
      "fields": {
        "created_at": "timestamp - creation time",
        "description": "string - detailed description",
        "id": "string - unique identifier",
        "metadata": "object - custom fields",
        "status": "enum - pending|in-progress|completed|blocked",
        "title": "string - display name",
        "updated_at": "timestamp - last update time"
      }
    }
  },

  "description": "{SYSTEM_NAME} integration for {DOMAIN} domain",
  "documentation": {
    "api_reference": "https://api.{service}.com/docs",
    "authentication_guide": "https://developers.{service}.com/authentication",
    "rate_limits": "https://docs.{service}.com/rate-limits",
    "service_docs": "https://docs.{service}.com/api",
    "webhook_docs": "https://docs.{service}.com/webhooks"
  },

  "error_handling": {
    "authentication_errors": {
      "cause": "Invalid or expired credentials",
      "solution": "Verify API key, check token expiration, refresh credentials"
    },
    "connection_errors": {
      "cause": "Cannot connect to {system}",
      "solution": "Check internet connection, verify API endpoint, check credentials"
    },
    "data_not_found": {
      "cause": "Item doesn't exist or was deleted",
      "solution": "Check item ID, verify in {system} dashboard"
    },
    "rate_limiting": {
      "cause": "Too many requests",
      "solution": "Implement exponential backoff (see retry configuration)"
    }
  },

  "examples": {
    "create_item": {
      "request": {
        "operation": "create_item",
        "parameters": {
          "description": "Task description",
          "title": "New task"
        }
      },
      "response": {
        "created_at": "2025-10-29T14:30:00Z",
        "id": "item-123",
        "title": "New task"
      }
    },
    "list_items": {
      "request": {
        "operation": "list_items",
        "parameters": {
          "filter": "status:pending",
          "limit": 5
        }
      },
      "response": {
        "items": [
          {
            "id": "item-1",
            "status": "pending",
            "title": "First item"
          }
        ],
        "next_offset": null,
        "total": 1
      }
    }
  },

  "integration": {
    "related_commands": [
      "/{domain}:next - Uses this MCP to get next item",
      "/{domain}:context - Uses this MCP to get details",
      "/{domain}:list - Uses this MCP to list items",
      "/{domain}:update - Uses this MCP to update items"
    ],

    "related_hooks": ["pre-commit - May reference items from this MCP"],
    "related_skills": ["{domain}-expert - References these operations"]
  },

  "limitations": {
    "api_version": "Current API version: v1",
    "batch_size": "Maximum items per request (usually 100-1000)",
    "concurrent_requests": "Maximum simultaneous connections",
    "field_limits": "Text field character limits, file size limits",
    "rate_limits": "Check {system} documentation for current limits"
  },

  "metadata": {
    "author": "{AUTHOR}",
    "created_at": "{CREATION_TIMESTAMP}",
    "documentation": "See README.md for setup instructions",
    "status": "stub",
    "tags": ["{domain}", "{system}", "integration"]
  },

  "name": "{domain}-{system}",
  "next_steps": [
    "1. CUSTOMIZE: Replace placeholders ({DOMAIN}, {SYSTEM}, etc.)",
    "2. SETUP: Get API credentials and set environment variables",
    "3. IMPLEMENT: Replace stub operations with actual API calls",
    "4. TEST: Run test suite and verify all operations",
    "5. INTEGRATE: Link to commands and skills in {domain} namespace",
    "6. SHARE: Add to plugin if using team sharing"
  ],
  "operations": {
    "description": "Available operations for this MCP server",

    "read": {
      "description": "Read-only operations (safe to call frequently)",
      "queries": [
        {
          "description": "List all items from {system}",
          "example": {
            "filter": "status:active",
            "limit": 10
          },
          "name": "list_items",
          "parameters": {
            "filter": "optional filter criteria",
            "limit": "max results (default: 100)",
            "offset": "pagination offset"
          }
        },
        {
          "description": "Get detailed information about specific item",
          "example": {
            "item_id": "item-123"
          },
          "name": "get_item_details",
          "parameters": {
            "include_metadata": "optional - include full metadata",
            "item_id": "required - unique identifier"
          }
        },
        {
          "description": "Search items by query",
          "example": {
            "fields": "title,description",
            "limit": 20,
            "query": "active tasks"
          },
          "name": "search_items",
          "parameters": {
            "fields": "fields to search in",
            "limit": "max results",
            "query": "search query string"
          }
        }
      ]
    },

    "write": {
      "description": "Write operations (use with caution)",
      "mutations": [
        {
          "description": "Create new item in {system}",
          "example": {
            "description": "Description of item",
            "title": "New item"
          },
          "name": "create_item",
          "parameters": {
            "description": "optional - item description",
            "metadata": "optional - custom fields",
            "title": "required - item title"
          }
        },
        {
          "description": "Update existing item",
          "example": {
            "changes": {
              "assigned_to": "user@example.com",
              "status": "in-progress"
            },
            "item_id": "item-123"
          },
          "name": "update_item",
          "parameters": {
            "changes": "fields to update",
            "item_id": "required - item to update"
          }
        },
        {
          "description": "Delete item (use cautiously)",
          "example": {
            "archive_instead": true,
            "item_id": "item-123"
          },
          "name": "delete_item",
          "parameters": {
            "archive_instead": "optional - archive instead of delete",
            "item_id": "required - item to delete"
          }
        }
      ]
    }
  },

  "roadmap": {
    "implemented": [
      "Basic CRUD operations",
      "API authentication",
      "Error handling"
    ],

    "todo": [
      "Webhook support (if service provides)",
      "Batch operations",
      "Caching for frequently accessed data",
      "Advanced search and filtering",
      "Custom field mappings"
    ]
  },

  "security": {
    "best_practices": [
      "Keep credentials in .env (not .env.example)",
      "Use read-only tokens when possible",
      "Implement request signing if available",
      "Monitor rate limits and quota usage",
      "Implement retry logic with exponential backoff"
    ],

    "considerations": [
      "Never commit API keys to version control",
      "Use environment variables for all credentials",
      "Rotate API keys regularly",
      "Use minimal required permissions",
      "Audit access logs in {system} dashboard"
    ],

    "scope_recommendations": [
      "read - for list and get operations",
      "write - for create and update operations",
      "delete - only if needed, limit to admin"
    ]
  },

  "setup": {
    "description": "How to configure this MCP server",

    "installation_steps": [
      "1. Get API credentials from {SYSTEM_NAME}",
      "2. Set environment variables: export {DOMAIN_SERVICE_API_KEY}=...",
      "3. Test connection: /{domain}:test-connection",
      "4. Verify in registry: /registry:scan {domain}",
      "5. Configure related commands"
    ],

    "optional_env_vars": [
      {
        "default": "value",
        "description": "Optional custom configuration",
        "example": "custom_value",
        "name": "{DOMAIN_SERVICE_CUSTOM_FIELD}"
      }
    ],

    "prerequisites": [
      "Account on {SYSTEM_NAME}",
      "API credentials (see authentication section)",
      "Environment variables configured"
    ],

    "required_env_vars": [
      {
        "description": "API key for {system}",
        "example": "sk_live_abc123def456",
        "name": "{DOMAIN_SERVICE_API_KEY}",
        "where_to_get": "https://developers.{service}.com/tokens"
      },
      {
        "description": "Database or workspace ID",
        "example": "db_abc123",
        "name": "{DOMAIN_SERVICE_DB_ID}",
        "where_to_get": "From {system} dashboard or API"
      }
    ],

    "test_connection": {
      "command": "/{domain}:test-connection",
      "success_response": "Connected to {system} successfully",
      "what_it_does": "Verifies credentials and connectivity"
    }
  },

  "testing": {
    "how_to_test": [
      "1. Set up environment variables",
      "2. Run: /test:mcp {domain}-{system}",
      "3. Test each operation manually",
      "4. Verify in /registry:scan"
    ],

    "test_cases": [
      "List items with default filter",
      "List items with custom filter",
      "Get details on specific item",
      "Create new item",
      "Update existing item",
      "Search items",
      "Handle connection errors",
      "Handle authentication errors"
    ]
  },

  "troubleshooting": {
    "authentication_failed": {
      "checks": [
        "Verify API key is correct",
        "Check API key hasn't expired",
        "Verify key has required permissions",
        "Try regenerating the key"
      ],
      "symptoms": "401 Unauthorized or invalid credentials"
    },

    "connection_refused": {
      "checks": [
        "Verify API endpoint is correct",
        "Check internet connection",
        "Verify firewall rules allow outbound HTTPS",
        "Check service status page"
      ],
      "symptoms": "Cannot connect to API endpoint"
    },

    "data_not_found": {
      "checks": [
        "Verify item ID is correct",
        "Check item exists in {system}",
        "Verify filter syntax",
        "Check for permission issues"
      ],
      "symptoms": "404 Not Found or empty results"
    },
    "rate_limit_exceeded": {
      "checks": [
        "Check current request rate",
        "Implement exponential backoff",
        "Check rate limit documentation",
        "Consider caching results"
      ],
      "symptoms": "429 Too Many Requests"
    }
  },

  "type": "mcp",
  "version": "1.0.0",

  "version_history": {
    "1.0.0": "Initial stub created by scaffold"
  }
}
